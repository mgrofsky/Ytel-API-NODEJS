/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class PhoneNumberController {
    /**
     * Get DID Score Number
     *
     * @param {string} phonenumber Specifies the multiple phone numbers for check updated spamscore
     * .
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createGetDIDScore(phonenumber, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/incomingphone/getdidscore.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            Phonenumber: phonenumber,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Transfer phone number that has been purchased for from one account to another account.
     *
     * @param {string} phonenumber A valid 10-digit Ytel number (E.164 format).
     * @param {string} fromaccountsid A specific Accountsid from where Number is getting transfer.
     * @param {string} toaccountsid A specific Accountsid to which Number is getting transfer.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createMoveNumber(phonenumber, fromaccountsid, toaccountsid, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/incomingphone/transferphonenumbers.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            phonenumber,
            fromaccountsid,
            toaccountsid,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Purchase a phone number to be used with your Ytel account
     *
     * @param {string} phoneNumber A valid 10-digit Ytel number (E.164 format).
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createPurchaseNumber(phoneNumber, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/incomingphone/buynumber.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            PhoneNumber: phoneNumber,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Remove a purchased Ytel number from your account.
     *
     * @param {string} responseType Response type format xml or json
     * @param {string} phoneNumber A valid 10-digit Ytel number (E.164 format).
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createReleaseNumber(responseType, phoneNumber, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/incomingphone/releasenumber.{ResponseType}'}`;

        // process template parameters
        _queryBuilder = _apiHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            ResponseType: responseType,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            PhoneNumber: phoneNumber,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Retrieve the details for a phone number by its number.
     *
     * @param {string} phoneNumber A valid Ytel 10-digit phone number (E.164 format).
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createViewDetails(phoneNumber, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/incomingphone/viewnumber.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            PhoneNumber: phoneNumber,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Remove a purchased Ytel number from your account.
     *
     * @param {string} phoneNumber A valid Ytel comma separated numbers (E.164 format).
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createBulkRelease(phoneNumber, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/incomingphone/massreleasenumber.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            PhoneNumber: phoneNumber,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Retrieve a list of available phone numbers that can be purchased and used for your Ytel
     * account.
     *
     * @param {NumbertypeEnum} numbertype Number type either SMS,Voice or all
     * @param {string} areacode Specifies the area code for the returned list of available numbers.
     * Only available for North American numbers.
     * @param {int} pagesize (optional) The count of objects to return.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createAvailableNumbers(numbertype, areacode, pagesize, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/incomingphone/availablenumber.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            numbertype: (numbertype !== null) ? numbertype : null,
            areacode,
            pagesize,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Update properties for a Ytel number that has been purchased for your account. Refer to the
     * parameters list for the list of properties that can be updated.
     *
     * @param {string} phoneNumber A valid Ytel number (E.164 format).
     * @param {string} voiceUrl URL requested once the call connects
     * @param {string} friendlyName (optional) Phone number friendly name description
     * @param {string} voiceMethod (optional) Post or Get
     * @param {string} voiceFallbackUrl (optional) URL requested if the voice URL is not available
     * @param {string} voiceFallbackMethod (optional) Post or Get
     * @param {string} hangupCallback (optional) callback url after a hangup occurs
     * @param {string} hangupCallbackMethod (optional) Post or Get
     * @param {string} heartbeatUrl (optional) URL requested once the call connects
     * @param {string} heartbeatMethod (optional) URL that can be requested every 60 seconds during
     * the call to notify of elapsed time
     * @param {string} smsUrl (optional) URL requested when an SMS is received
     * @param {string} smsMethod (optional) Post or Get
     * @param {string} smsFallbackUrl (optional) URL used if any errors occur during execution of
     * InboundXML from an SMS or at initial request of the SmsUrl.
     * @param {string} smsFallbackMethod (optional) The HTTP method Ytel will use when URL
     * requested if the SmsUrl is not available.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static updateNumber(phoneNumber,
        voiceUrl,
        friendlyName,
        voiceMethod,
        voiceFallbackUrl,
        voiceFallbackMethod,
        hangupCallback,
        hangupCallbackMethod,
        heartbeatUrl,
        heartbeatMethod,
        smsUrl,
        smsMethod,
        smsFallbackUrl,
        smsFallbackMethod,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/incomingphone/updatenumber.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            PhoneNumber: phoneNumber,
            VoiceUrl: voiceUrl,
            FriendlyName: friendlyName,
            VoiceMethod: voiceMethod,
            VoiceFallbackUrl: voiceFallbackUrl,
            VoiceFallbackMethod: voiceFallbackMethod,
            HangupCallback: hangupCallback,
            HangupCallbackMethod: hangupCallbackMethod,
            HeartbeatUrl: heartbeatUrl,
            HeartbeatMethod: heartbeatMethod,
            SmsUrl: smsUrl,
            SmsMethod: smsMethod,
            SmsFallbackUrl: smsFallbackUrl,
            SmsFallbackMethod: smsFallbackMethod,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Retrieve a list of purchased phones numbers associated with your Ytel account.
     *
     * @param {int} page (optional) Which page of the overall response will be returned. Page
     * indexing starts at 1.
     * @param {int} pageSize (optional) The page count to retrieve from the total results in the
     * collection. Page indexing starts at 1.
     * @param {NumberType14Enum} numberType (optional) The capability supported by the number.
     * Number type either SMS,Voice or all
     * @param {string} friendlyName (optional) A human-readable label added to the number object.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createListNumbers(page, pageSize, numberType, friendlyName, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/incomingphone/listnumber.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            Page: page,
            PageSize: pageSize,
            NumberType: (numberType !== null) ? numberType : null,
            FriendlyName: friendlyName,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Update properties for a Ytel numbers that has been purchased for your account. Refer to
     * the parameters list for the list of properties that can be updated.
     *
     * @param {string} phoneNumber A valid comma(,) separated Ytel numbers. (E.164 format).
     * @param {string} voiceUrl The URL returning InboundXML incoming calls should execute when
     * connected.
     * @param {string} friendlyName (optional) A human-readable value for labeling the number.
     * @param {string} voiceMethod (optional) Specifies the HTTP method used to request the
     * VoiceUrl once incoming call connects.
     * @param {string} voiceFallbackUrl (optional) URL used if any errors occur during execution of
     * InboundXML on a call or at initial request of the voice
     * url
     * @param {string} voiceFallbackMethod (optional) Specifies the HTTP method used to request the
     * VoiceFallbackUrl once incoming call connects.
     * @param {string} hangupCallback (optional) URL that can be requested to receive notification
     * when and how incoming call has ended.
     * @param {string} hangupCallbackMethod (optional) The HTTP method Ytel will use when
     * requesting the HangupCallback URL.
     * @param {string} heartbeatUrl (optional) URL that can be used to monitor the phone number.
     * @param {string} heartbeatMethod (optional) The HTTP method Ytel will use when requesting the
     * HeartbeatUrl.
     * @param {string} smsUrl (optional) URL requested when an SMS is received.
     * @param {string} smsMethod (optional) The HTTP method Ytel will use when requesting the
     * SmsUrl.
     * @param {string} smsFallbackUrl (optional) URL used if any errors occur during execution of
     * InboundXML from an SMS or at initial request of the SmsUrl.
     * @param {string} smsFallbackMethod (optional) The HTTP method Ytel will use when URL
     * requested if the SmsUrl is not available.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createBulkUpdateNumbers(phoneNumber,
        voiceUrl,
        friendlyName,
        voiceMethod,
        voiceFallbackUrl,
        voiceFallbackMethod,
        hangupCallback,
        hangupCallbackMethod,
        heartbeatUrl,
        heartbeatMethod,
        smsUrl,
        smsMethod,
        smsFallbackUrl,
        smsFallbackMethod,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/incomingphone/massupdatenumber.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            PhoneNumber: phoneNumber,
            VoiceUrl: voiceUrl,
            FriendlyName: friendlyName,
            VoiceMethod: voiceMethod,
            VoiceFallbackUrl: voiceFallbackUrl,
            VoiceFallbackMethod: voiceFallbackMethod,
            HangupCallback: hangupCallback,
            HangupCallbackMethod: hangupCallbackMethod,
            HeartbeatUrl: heartbeatUrl,
            HeartbeatMethod: heartbeatMethod,
            SmsUrl: smsUrl,
            SmsMethod: smsMethod,
            SmsFallbackUrl: smsFallbackUrl,
            SmsFallbackMethod: smsFallbackMethod,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Purchase a selected number of DID's from specific area codes to be used with your Ytel
     * account.
     *
     * @param {NumberType15Enum} numberType The capability the number supports.
     * @param {string} areaCode Specifies the area code for the returned list of available numbers.
     * Only available for North American numbers.
     * @param {string} quantity A positive integer that tells how many number you want to buy at a
     * time.
     * @param {string} leftover (optional) If desired quantity is unavailable purchase what is
     * available .
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createBulkBuyNumbers(numberType, areaCode, quantity, leftover, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/incomingphone/bulkbuy.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            NumberType: (numberType !== null) ? numberType : null,
            AreaCode: areaCode,
            Quantity: quantity,
            Leftover: leftover,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = PhoneNumberController;
