/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class ConferenceController {
    /**
     * Play an audio file during a conference.
     *
     * @param {string} conferenceSid The unique identifier for a conference object.
     * @param {string} participantSid The unique identifier for a participant object.
     * @param {AudioUrlEnum} audioUrl The URL for the audio file that is to be played during the
     * conference. Multiple audio files can be chained by using a
     * semicolon.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createPlayAudio(conferenceSid, participantSid, audioUrl, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/conferences/playAudio.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            ConferenceSid: conferenceSid,
            ParticipantSid: participantSid,
            AudioUrl: (audioUrl !== null) ? audioUrl : null,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Remove a participant from a conference.
     *
     * @param {string} participantSid The unique identifier for a participant object.
     * @param {string} conferenceSid The unique identifier for a conference object.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createHangupParticipant(participantSid, conferenceSid, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/conferences/hangupParticipant.json'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            ParticipantSid: participantSid,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            ConferenceSid: conferenceSid,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Retrieve information about a conference by its ConferenceSid.
     *
     * @param {string} conferenceSid The unique identifier of each conference resource
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createViewConference(conferenceSid, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/conferences/viewconference.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            ConferenceSid: conferenceSid,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Retrieve information about a participant by its ParticipantSid.
     *
     * @param {string} conferenceSid The unique identifier for a conference object.
     * @param {string} participantSid The unique identifier for a participant object.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createViewParticipant(conferenceSid, participantSid, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/conferences/viewParticipant.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            ConferenceSid: conferenceSid,
            ParticipantSid: participantSid,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Deaf Mute Participant
     *
     * @param {string} conferenceSid ID of the active conference
     * @param {string} participantSid ID of an active participant
     * @param {bool} muted (optional) Mute a participant
     * @param {bool} deaf (optional) Make it so a participant cant hear
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createSilenceParticipant(conferenceSid, participantSid, muted, deaf, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/conferences/deafMuteParticipant.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            conferenceSid,
            ParticipantSid: participantSid,
            Muted: muted,
            Deaf: deaf,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Add Participant in conference
     *
     * @param {string} conferenceSid The unique identifier for a conference object.
     * @param {string} participantNumber The phone number of the participant to be added.
     * @param {bool} muted (optional) Specifies if participant should be muted.
     * @param {bool} deaf (optional) Specifies if the participant should hear audio in the
     * conference.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static addParticipant(conferenceSid, participantNumber, muted, deaf, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/conferences/addParticipant.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            ConferenceSid: conferenceSid,
            ParticipantNumber: participantNumber,
            Muted: muted,
            Deaf: deaf,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Here you can experiment with initiating a conference call through Ytel and view the
     * request response generated when doing so.
     *
     * @param {string} url URL requested once the conference connects
     * @param {string} from A valid 10-digit number (E.164 format) that will be initiating the
     * conference call.
     * @param {string} to A valid 10-digit number (E.164 format) that is to receive the conference
     * call.
     * @param {string} method (optional) Specifies the HTTP method used to request the required URL
     * once call connects.
     * @param {string} statusCallBackUrl (optional) URL that can be requested to receive
     * notification when call has ended. A set of default
     * parameters will be sent here once the conference is
     * finished.
     * @param {string} statusCallBackMethod (optional) Specifies the HTTP methodlinkclass used to
     * request StatusCallbackUrl.
     * @param {string} fallbackUrl (optional) URL requested if the initial Url parameter fails or
     * encounters an error
     * @param {string} fallbackMethod (optional) Specifies the HTTP method used to request the
     * required FallbackUrl once call connects.
     * @param {bool} record (optional) Specifies if the conference should be recorded.
     * @param {string} recordCallBackUrl (optional) Recording parameters will be sent here upon
     * completion.
     * @param {string} recordCallBackMethod (optional) Specifies the HTTP method used to request
     * the required URL once conference connects.
     * @param {string} scheduleTime (optional) Schedule conference in future. Schedule time must be
     * greater than current time
     * @param {int} timeout (optional) The number of seconds the call stays on the line while
     * waiting for an answer. The max time limit is 999 and the default limit
     * is 60 seconds but lower times can be set.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createConference(url,
        from,
        to,
        method,
        statusCallBackUrl,
        statusCallBackMethod,
        fallbackUrl,
        fallbackMethod,
        record,
        recordCallBackUrl,
        recordCallBackMethod,
        scheduleTime,
        timeout,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/conferences/createConference.json'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            Url: url,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            From: from,
            To: to,
            Method: method,
            StatusCallBackUrl: statusCallBackUrl,
            StatusCallBackMethod: statusCallBackMethod,
            FallbackUrl: fallbackUrl,
            FallbackMethod: fallbackMethod,
            Record: record,
            RecordCallBackUrl: recordCallBackUrl,
            RecordCallBackMethod: recordCallBackMethod,
            ScheduleTime: scheduleTime,
            Timeout: timeout,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Retrieve a list of participants for an in-progress conference.
     *
     * @param {string} conferenceSid The unique identifier for a conference.
     * @param {int} page (optional) The page count to retrieve from the total results in the
     * collection. Page indexing starts at 1.
     * @param {int} pagesize (optional) The count of objects to return per page.
     * @param {bool} muted (optional) Specifies if participant should be muted.
     * @param {bool} deaf (optional) Specifies if the participant should hear audio in the
     * conference.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createListParticipants(conferenceSid, page, pagesize, muted, deaf, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/conferences/listParticipant.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            ConferenceSid: conferenceSid,
            Page: page,
            Pagesize: pagesize,
            Muted: muted,
            Deaf: deaf,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Retrieve a list of conference objects.
     *
     * @param {int} page (optional) The page count to retrieve from the total results in the
     * collection. Page indexing starts at 1.
     * @param {int} pagesize (optional) Number of individual resources listed in the response per
     * page
     * @param {string} friendlyName (optional) Only return conferences with the specified
     * FriendlyName
     * @param {string} dateCreated (optional) Conference created date
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createListConferences(page, pagesize, friendlyName, dateCreated, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/conferences/listconference.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _form = {
            page,
            pagesize,
            FriendlyName: friendlyName,
            DateCreated: dateCreated,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = ConferenceController;
