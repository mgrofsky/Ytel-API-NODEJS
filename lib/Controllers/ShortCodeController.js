/**
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class ShortCodeController {
    /**
     * Retrieve a list of Short Code assignment associated with your Ytel account.
     *
     * @param  {array}  input    Array with all options for search
     * @param {string} input['shortcode'] (optional) Only list Short Code Assignment sent from this
     * Short Code
     * @param {string} input['page'] (optional) The page count to retrieve from the total results
     * in the collection. Page indexing starts at 1.
     * @param {string} input['pagesize'] (optional) The count of objects to return per page.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createDedicatedshortcodeListshortcode(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/dedicatedshortcode/listshortcode.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare form data
        const _form = {
            Shortcode: input.shortcode,
            page: input.page,
            pagesize: input.pagesize,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Update a dedicated shortcode.
     *
     * @param  {array}  input    Array with all options for search
     * @param {string} input['shortcode'] List of valid dedicated shortcode to your Ytel account.
     * @param {string} input['friendlyName'] (optional) User generated name of the dedicated
     * shortcode.
     * @param {string} input['callbackMethod'] (optional) Specifies the HTTP method used to request
     * the required StatusCallBackUrl once call connects.
     * @param {string} input['callbackUrl'] (optional) URL that can be requested to receive
     * notification when call has ended. A set of default
     * parameters will be sent here once the call is finished.
     * @param {string} input['fallbackMethod'] (optional) Specifies the HTTP method used to request
     * the required FallbackUrl once call connects.
     * @param {string} input['fallbackUrl'] (optional) URL used if any errors occur during
     * execution of InboundXML or at initial request of the
     * required Url provided with the POST.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createDedicatedshortcodeUpdateshortcode(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/dedicatedshortcode/updateshortcode.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare form data
        const _form = {
            Shortcode: input.shortcode,
            FriendlyName: input.friendlyName,
            CallbackMethod: input.callbackMethod,
            CallbackUrl: input.callbackUrl,
            FallbackMethod: input.fallbackMethod,
            FallbackUrl: input.fallbackUrl,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Retrieve a single Short Code object by its shortcode assignment.
     *
     * @param {string} shortcode List of valid Dedicated Short Code to your Ytel account
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createDedicatedshortcodeViewshortcode(shortcode, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/dedicatedshortcode/viewshortcode.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare form data
        const _form = {
            Shortcode: shortcode,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * View a single Sms Short Code message.
     *
     * @param {string} messageSid The unique identifier for the sms resource
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createShortcodeViewsms(messageSid, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/shortcode/viewsms.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare form data
        const _form = {
            MessageSid: messageSid,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
     *
     * @param  {array}  input    Array with all options for search
     * @param {int} input['page'] (optional) The page count to retrieve from the total results in
     * the collection. Page indexing starts at 1.
     * @param {int} input['pagesize'] (optional) Number of individual resources listed in the
     * response per page
     * @param {string} input['from'] (optional) Only list SMS messages sent from this number
     * @param {string} input['shortcode'] (optional) Only list SMS messages sent to Shortcode
     * @param {string} input['datecreated'] (optional) Only list SMS messages sent in the specified
     * date MAKE REQUEST
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createDedicatedshortcodeGetinboundsms(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/dedicatedshortcode/getinboundsms.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare form data
        const _form = {
            page: (input.page !== null) ? input.page : 1,
            pagesize: (input.pagesize !== null) ? input.pagesize : 10,
            From: input.from,
            Shortcode: input.shortcode,
            Datecreated: input.datecreated,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Send Dedicated Shortcode
     *
     * @param  {array}  input    Array with all options for search
     * @param {int} input['shortcode'] Your dedicated shortcode
     * @param {double} input['to'] The number to send your SMS to
     * @param {string} input['body'] The body of your message
     * @param {string} input['method'] (optional) Specifies the HTTP method used to request the
     * required URL once the Short Code message is sent.GET or
     * POST
     * @param {string} input['messagestatuscallback'] (optional) URL that can be requested to
     * receive notification when Short Code message
     * was sent.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createDedicatedshortcodeSendsms(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/dedicatedshortcode/sendsms.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare form data
        const _form = {
            shortcode: input.shortcode,
            to: input.to,
            body: input.body,
            method: input.method,
            messagestatuscallback: input.messagestatuscallback,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Retrieve a list of Short Code messages.
     *
     * @param  {array}  input    Array with all options for search
     * @param {string} input['shortcode'] (optional) Only list messages sent from this Short Code
     * @param {string} input['to'] (optional) Only list messages sent to this number
     * @param {string} input['dateSent'] (optional) Only list messages sent with the specified
     * date
     * @param {int} input['page'] (optional) The page count to retrieve from the total results in
     * the collection. Page indexing starts at 1.
     * @param {int} input['pageSize'] (optional) The count of objects to return per page.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createShortcodeListsms(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _queryBuilder = `${_baseUri}${'/shortcode/listsms.json'}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare form data
        const _form = {
            Shortcode: input.shortcode,
            To: input.to,
            DateSent: input.dateSent,
            Page: (input.page !== null) ? input.page : 1,
            PageSize: (input.pageSize !== null) ? input.pageSize : 10,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            form: _form,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = ShortCodeController;
