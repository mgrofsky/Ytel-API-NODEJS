/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.EmailController;
const TypeEnum = testerlib.TypeEnum;

describe("EmailController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Retrieve a list of emails that have been blocked.
     */
    it("should testTestBlockedEmails response", function testTestBlockedEmailsTest(done) {
        // parameters for the API call
        let offset = null;
        let limit = null;

        controller.createBlockedEmails(offset, limit, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * Retrieve a list of emails that are on the spam list.
     */
    it("should testTestSpamEmails response", function testTestSpamEmailsTest(done) {
        // parameters for the API call
        let offset = null;
        let limit = null;

        controller.createSpamEmails(offset, limit, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * Retrieve a list of emails that have bounced.
     */
    it("should testTestBouncedEmails response", function testTestBouncedEmailsTest(done) {
        // parameters for the API call
        let offset = null;
        let limit = null;

        controller.createBouncedEmails(offset, limit, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * Retrieve a list of invalid email addresses.
     */
    it("should testTestInvalidEmails response", function testTestInvalidEmailsTest(done) {
        // parameters for the API call
        let offset = null;
        let limit = null;

        controller.createInvalidEmails(offset, limit, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * Retrieve a list of email addresses from the unsubscribe list.
     */
    it("should testTestListUnsubscribedEmails response", function testTestListUnsubscribedEmailsTest(done) {
        // parameters for the API call
        let offset = null;
        let limit = null;

        controller.createListUnsubscribedEmails(offset, limit, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

});
